{"version":3,"sources":["../../src/serviceWorker.ts"],"names":["isLocalhost","Boolean","window","process","publicUrl","swUrl","PUBLIC_URL","checkValidServiceWorker","navigator","console","registerValidSW","registration","installingWorker","config","error","fetch","headers","response","contentType"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"file":"serviceWorker.js"}