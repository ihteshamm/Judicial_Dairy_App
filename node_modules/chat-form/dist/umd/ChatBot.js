(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "prop-types", "react", "./App.module.scss", "./assets/icon.svg", "./assets/send.svg", "./assets/description.svg", "react-textarea-autosize", "./Message", "./Options", "dayjs"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("prop-types"), require("react"), require("./App.module.scss"), require("./assets/icon.svg"), require("./assets/send.svg"), require("./assets/description.svg"), require("react-textarea-autosize"), require("./Message"), require("./Options"), require("dayjs"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.propTypes, global.react, global.AppModule, global.icon, global.send, global.description, global.reactTextareaAutosize, global.Message, global.Options, global.dayjs);
    global.undefined = mod.exports;
  }
})(this, function (exports, _propTypes, _react, _AppModule, _icon, _send, _description, _reactTextareaAutosize, _Message, _Options, _dayjs) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react2 = _interopRequireDefault(_react);

  var _AppModule2 = _interopRequireDefault(_AppModule);

  var _icon2 = _interopRequireDefault(_icon);

  var _send2 = _interopRequireDefault(_send);

  var _description2 = _interopRequireDefault(_description);

  var _reactTextareaAutosize2 = _interopRequireDefault(_reactTextareaAutosize);

  var _Message2 = _interopRequireDefault(_Message);

  var _Options2 = _interopRequireDefault(_Options);

  var _dayjs2 = _interopRequireDefault(_dayjs);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  const ChatBot = props => {
    const {
      className,
      questions,
      lastMessage,
      onAnswer,
      initialMessages = []
    } = props;
    const [idleTime, setIdleTime] = (0, _react.useState)(0);
    const [keyValue, setKeyValue] = (0, _react.useState)({});
    const [currentQuestion, setCurrentQuestion] = (0, _react.useState)();

    const updateQuestionsWithAnswers = answer => {
      const val = currentQuestion && _objectSpread(_objectSpread({}, keyValue), {}, {
        [currentQuestion.identifier]: answer
      });

      if (val) {
        setKeyValue(val);
      }

      const value = questions.map(each => each.identifier === currentQuestion?.identifier ? _objectSpread(_objectSpread({}, each), {}, {
        answered: true,
        answer
      }) : each);
      onAnswer(value, val);
    };

    const [open, setOpen] = (0, _react.useState)(true);
    const [value, setValue] = (0, _react.useState)('');
    const [chatList, setChatList] = (0, _react.useState)(initialMessages);
    const [typing, setTyping] = (0, _react.useState)(false);

    const onChange = e => {
      e.persist();
      setValue(e.target.value);
    };

    const [selected, setSelected] = (0, _react.useState)([]);

    const onSelect = select => {
      const index = selected.findIndex(val => val === select);

      if (index !== -1) {
        return setSelected(val => val.filter((e, i) => i !== index));
      }

      setSelected(val => [...val, select]);
    };

    const onSend = () => {
      setIdleTime(0);

      if (value) {
        const time = (0, _dayjs2.default)().format();
        setChatList(val => [...val, {
          message: value,
          sender: 'user',
          time
        }]);
        const answer = currentQuestion?.answerType === 'csv' ? value.split(',') : value;

        if (currentQuestion?.validator) {
          const validatorCallBack = currentQuestion?.validator?.validatorCallback;

          if (validatorCallBack && !validatorCallBack(answer)) {
            setTyping(true);
            setTimeout(() => {
              setChatList(val => [...val, {
                message: currentQuestion?.validator?.message(value) || '',
                sender: 'bot',
                time
              }]);
              setTyping(false);
            }, 1000);
            return;
          }
        }

        updateQuestionsWithAnswers(answer);
        setValue('');
        return;
      }
    };

    const onFinish = () => {
      setIdleTime(0);
      const time = (0, _dayjs2.default)().format();
      const message = !selected.length ? `My ${currentQuestion?.identifier} not listed` : ` - ${selected.join(`\n - `)}`;
      setChatList(val => [...val, {
        message,
        sender: 'user',
        time
      }]);

      if (currentQuestion?.validator) {
        const validatorCallBack = currentQuestion?.validator?.validatorCallback;

        if (validatorCallBack && !validatorCallBack(selected)) {
          return setChatList(val => [...val, {
            message: currentQuestion?.validator?.message(selected) || '',
            sender: 'bot',
            time
          }]);
        }
      }

      setCurrentQuestion(undefined);
      updateQuestionsWithAnswers(selected);
      setSelected([]);
    };

    const onEnter = e => {
      if (e.charCode === 13 && value && !e.shiftKey) {
        onSend();
      }
    };

    (0, _react.useEffect)(() => {
      setTyping(true);
      setTimeout(() => {
        const time = (0, _dayjs2.default)().format();
        const sender = 'bot';
        const unansweredQuestion = questions.find(question => !question.answered);
        setCurrentQuestion(unansweredQuestion);

        if (unansweredQuestion) {
          const message = unansweredQuestion.question(keyValue);
          setChatList(val => [...val, {
            message,
            sender,
            time
          }]);
        } else {
          const message = lastMessage(keyValue);
          setChatList(val => [...val, {
            message,
            sender,
            time
          }]);
        }

        setTyping(false);
      }, 1000); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [questions]);
    (0, _react.useEffect)(() => {
      const list = document.getElementById('chat-list-body');

      if (list) {
        list.scrollTop = list.scrollHeight;
      }
    }, [chatList.length]);
    (0, _react.useEffect)(() => {
      if (open) {
        const interval = setInterval(() => {
          setIdleTime(val => val + 1);
        }, 1000);
        return () => {
          clearInterval(interval);
          setIdleTime(0);
        };
      }
    }, [open]);
    (0, _react.useEffect)(() => {
      if (idleTime >= 300) {
        setOpen(false);
      }
    }, [idleTime, currentQuestion]);
    const [, setRef] = (0, _react.useState)(null);
    const [file, setFile] = (0, _react.useState)({
      src: ''
    });

    const onSelectFile = () => {
      const time = (0, _dayjs2.default)().format();
      setChatList(val => [...val, {
        message: value,
        fileSrc: file.src,
        sender: 'user',
        time,
        file: file.file
      }]);
      updateQuestionsWithAnswers(file);
      setFile(val => _objectSpread(_objectSpread({}, val), {}, {
        src: ''
      }));
    };

    const onChangeFile = e => {
      const file = e.target.files && e.target.files[0];
      const reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onloadend = () => {
        setFile({
          file,
          src: reader.result
        });
      };
    };

    return /*#__PURE__*/_react2.default.createElement("span", {
      className: [_AppModule2.default.chatBot, className].join(' ')
    }, /*#__PURE__*/_react2.default.createElement("div", {
      style: {
        height: open ? 600 : 0,
        width: open ? 320 : 0,
        transition: `height ${open ? 800 : 0}ms ease-out`
      },
      className: _AppModule2.default.chatBody
    }, /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.header
    }, /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.botLogo
    }, "BOT"), /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.display
    }, /*#__PURE__*/_react2.default.createElement("div", {
      style: {
        fontWeight: 'bold'
      }
    }, "Chat Assistant"), /*#__PURE__*/_react2.default.createElement("div", {
      style: {
        marginTop: 4
      }
    }, typing ? 'typing...' : 'online')), /*#__PURE__*/_react2.default.createElement("button", {
      onClick: () => setOpen(false),
      "aria-label": "close",
      className: _AppModule2.default.close
    }, "\xD7")), /*#__PURE__*/_react2.default.createElement("div", {
      id: "chat-list-body",
      className: _AppModule2.default.body
    }, chatList.map((message, index) => /*#__PURE__*/_react2.default.createElement(_Message2.default, _extends({
      key: index
    }, message))), currentQuestion?.options && /*#__PURE__*/_react2.default.createElement(_Options2.default, {
      onFinish: onFinish,
      options: currentQuestion.options,
      onSelect: onSelect,
      selected: selected
    })), idleTime > 240 && /*#__PURE__*/_react2.default.createElement("div", {
      onClick: () => setIdleTime(0),
      className: _AppModule2.default.keepAlive,
      role: "button",
      "aria-label": "keep open"
    }, `Chat assistant will close in ${300 - idleTime} seconds. Click here to keep alive`), file.src && /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.preview
    }, ['image/png', 'image/jpg'].includes(file.file.type) && /*#__PURE__*/_react2.default.createElement("img", {
      alt: "",
      src: file.src
    }), ['video/mp4'].includes(file.file.type) && /*#__PURE__*/_react2.default.createElement("video", {
      src: file.src
    }), !['video/mp4', 'image/png', 'image/jpg'].includes(file?.file?.type || '') && /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.attachment
    }, /*#__PURE__*/_react2.default.createElement("img", {
      alt: "",
      src: _description2.default
    }), /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.fileName
    }, file?.file?.name))), currentQuestion && /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.footer
    }, ['input', 'csv', 'number'].includes(currentQuestion.answerType) && /*#__PURE__*/_react2.default.createElement("input", {
      placeholder: "Jot something down",
      onKeyPress: onEnter,
      onChange: onChange,
      value: value,
      type: currentQuestion.answerType === 'number' ? 'number' : 'text',
      className: _AppModule2.default.input
    }), ['paragraph'].includes(currentQuestion.answerType) && /*#__PURE__*/_react2.default.createElement(_reactTextareaAutosize2.default, {
      onKeyPress: onEnter,
      placeholder: "Jot something down",
      onChange: onChange,
      value: value,
      maxRows: 6,
      className: _AppModule2.default.input
    }), currentQuestion.answerType === 'file' && /*#__PURE__*/_react2.default.createElement("div", {
      className: _AppModule2.default.uploader,
      role: "button",
      onClick: () => {
        const element = document.getElementById('file-id');
        element && element.click();
      },
      style: {
        flex: 1
      },
      id: "file-upload-id"
    }, "Upload a file", /*#__PURE__*/_react2.default.createElement("input", {
      accept: '.pdf,.doc,.png,.jpg,.docx,.mp4,.mov',
      ref: setRef,
      onChange: onChangeFile,
      style: {
        display: 'none'
      },
      id: "file-id",
      type: "file"
    })), currentQuestion.answerType !== 'select' && /*#__PURE__*/_react2.default.createElement("img", {
      role: "button",
      onClick: currentQuestion.answerType === 'file' ? onSelectFile : onSend,
      className: _AppModule2.default.icon,
      alt: "",
      src: _send2.default
    }))), !open && /*#__PURE__*/_react2.default.createElement("div", {
      tabIndex: 0,
      "data-testid": "open",
      role: "button",
      onClick: () => setOpen(true),
      "aria-label": "send message",
      className: _AppModule2.default.button
    }, /*#__PURE__*/_react2.default.createElement("img", {
      alt: "",
      src: _icon2.default
    })));
  };

  ChatBot.propTypes = {
    className: _propTypes2.default.string,
    lastMessage: _propTypes2.default.func.isRequired,
    questions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      question: _propTypes2.default.func.isRequired,
      answerType: _propTypes2.default.any,
      identifier: _propTypes2.default.string.isRequired,
      answer: _propTypes2.default.any,
      answered: _propTypes2.default.bool,
      options: _propTypes2.default.arrayOf(_propTypes2.default.string),
      fileSrc: _propTypes2.default.string,
      validator: _propTypes2.default.shape({
        message: _propTypes2.default.func.isRequired,
        validatorCallback: _propTypes2.default.func.isRequired
      })
    })).isRequired,
    onAnswer: _propTypes2.default.func.isRequired,
    initialMessages: _propTypes2.default.array
  };
  exports.default = ChatBot;
});
//# sourceMappingURL=ChatBot.js.map