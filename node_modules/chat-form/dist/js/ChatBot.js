"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AppModule = _interopRequireDefault(require("./App.module.scss"));

var _icon = _interopRequireDefault(require("./assets/icon.svg"));

var _send = _interopRequireDefault(require("./assets/send.svg"));

var _description = _interopRequireDefault(require("./assets/description.svg"));

var _reactTextareaAutosize = _interopRequireDefault(require("react-textarea-autosize"));

var _Message = _interopRequireDefault(require("./Message"));

var _Options = _interopRequireDefault(require("./Options"));

var _dayjs = _interopRequireDefault(require("dayjs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ChatBot = function ChatBot(props) {
  var _file$file, _file$file2;

  var className = props.className,
      questions = props.questions,
      lastMessage = props.lastMessage,
      onAnswer = props.onAnswer,
      _props$initialMessage = props.initialMessages,
      initialMessages = _props$initialMessage === void 0 ? [] : _props$initialMessage;

  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      idleTime = _useState2[0],
      setIdleTime = _useState2[1];

  var _useState3 = (0, _react.useState)({}),
      _useState4 = _slicedToArray(_useState3, 2),
      keyValue = _useState4[0],
      setKeyValue = _useState4[1];

  var _useState5 = (0, _react.useState)(),
      _useState6 = _slicedToArray(_useState5, 2),
      currentQuestion = _useState6[0],
      setCurrentQuestion = _useState6[1];

  var updateQuestionsWithAnswers = function updateQuestionsWithAnswers(answer) {
    var val = currentQuestion && _objectSpread(_objectSpread({}, keyValue), {}, _defineProperty({}, currentQuestion.identifier, answer));

    if (val) {
      setKeyValue(val);
    }

    var value = questions.map(function (each) {
      return each.identifier === (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.identifier) ? _objectSpread(_objectSpread({}, each), {}, {
        answered: true,
        answer: answer
      }) : each;
    });
    onAnswer(value, val);
  };

  var _useState7 = (0, _react.useState)(true),
      _useState8 = _slicedToArray(_useState7, 2),
      open = _useState8[0],
      setOpen = _useState8[1];

  var _useState9 = (0, _react.useState)(''),
      _useState10 = _slicedToArray(_useState9, 2),
      value = _useState10[0],
      setValue = _useState10[1];

  var _useState11 = (0, _react.useState)(initialMessages),
      _useState12 = _slicedToArray(_useState11, 2),
      chatList = _useState12[0],
      setChatList = _useState12[1];

  var _useState13 = (0, _react.useState)(false),
      _useState14 = _slicedToArray(_useState13, 2),
      typing = _useState14[0],
      setTyping = _useState14[1];

  var onChange = function onChange(e) {
    e.persist();
    setValue(e.target.value);
  };

  var _useState15 = (0, _react.useState)([]),
      _useState16 = _slicedToArray(_useState15, 2),
      selected = _useState16[0],
      setSelected = _useState16[1];

  var onSelect = function onSelect(select) {
    var index = selected.findIndex(function (val) {
      return val === select;
    });

    if (index !== -1) {
      return setSelected(function (val) {
        return val.filter(function (e, i) {
          return i !== index;
        });
      });
    }

    setSelected(function (val) {
      return [].concat(_toConsumableArray(val), [select]);
    });
  };

  var onSend = function onSend() {
    setIdleTime(0);

    if (value) {
      var time = (0, _dayjs.default)().format();
      setChatList(function (val) {
        return [].concat(_toConsumableArray(val), [{
          message: value,
          sender: 'user',
          time: time
        }]);
      });
      var answer = (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answerType) === 'csv' ? value.split(',') : value;

      if (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.validator) {
        var _currentQuestion$vali;

        var validatorCallBack = currentQuestion === null || currentQuestion === void 0 ? void 0 : (_currentQuestion$vali = currentQuestion.validator) === null || _currentQuestion$vali === void 0 ? void 0 : _currentQuestion$vali.validatorCallback;

        if (validatorCallBack && !validatorCallBack(answer)) {
          setTyping(true);
          setTimeout(function () {
            setChatList(function (val) {
              var _currentQuestion$vali2;

              return [].concat(_toConsumableArray(val), [{
                message: (currentQuestion === null || currentQuestion === void 0 ? void 0 : (_currentQuestion$vali2 = currentQuestion.validator) === null || _currentQuestion$vali2 === void 0 ? void 0 : _currentQuestion$vali2.message(value)) || '',
                sender: 'bot',
                time: time
              }]);
            });
            setTyping(false);
          }, 1000);
          return;
        }
      }

      updateQuestionsWithAnswers(answer);
      setValue('');
      return;
    }
  };

  var onFinish = function onFinish() {
    setIdleTime(0);
    var time = (0, _dayjs.default)().format();
    var message = !selected.length ? "My ".concat(currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.identifier, " not listed") : " - ".concat(selected.join("\n - "));
    setChatList(function (val) {
      return [].concat(_toConsumableArray(val), [{
        message: message,
        sender: 'user',
        time: time
      }]);
    });

    if (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.validator) {
      var _currentQuestion$vali3;

      var validatorCallBack = currentQuestion === null || currentQuestion === void 0 ? void 0 : (_currentQuestion$vali3 = currentQuestion.validator) === null || _currentQuestion$vali3 === void 0 ? void 0 : _currentQuestion$vali3.validatorCallback;

      if (validatorCallBack && !validatorCallBack(selected)) {
        return setChatList(function (val) {
          var _currentQuestion$vali4;

          return [].concat(_toConsumableArray(val), [{
            message: (currentQuestion === null || currentQuestion === void 0 ? void 0 : (_currentQuestion$vali4 = currentQuestion.validator) === null || _currentQuestion$vali4 === void 0 ? void 0 : _currentQuestion$vali4.message(selected)) || '',
            sender: 'bot',
            time: time
          }]);
        });
      }
    }

    setCurrentQuestion(undefined);
    updateQuestionsWithAnswers(selected);
    setSelected([]);
  };

  var onEnter = function onEnter(e) {
    if (e.charCode === 13 && value && !e.shiftKey) {
      onSend();
    }
  };

  (0, _react.useEffect)(function () {
    setTyping(true);
    setTimeout(function () {
      var time = (0, _dayjs.default)().format();
      var sender = 'bot';
      var unansweredQuestion = questions.find(function (question) {
        return !question.answered;
      });
      setCurrentQuestion(unansweredQuestion);

      if (unansweredQuestion) {
        var message = unansweredQuestion.question(keyValue);
        setChatList(function (val) {
          return [].concat(_toConsumableArray(val), [{
            message: message,
            sender: sender,
            time: time
          }]);
        });
      } else {
        var _message = lastMessage(keyValue);

        setChatList(function (val) {
          return [].concat(_toConsumableArray(val), [{
            message: _message,
            sender: sender,
            time: time
          }]);
        });
      }

      setTyping(false);
    }, 1000); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [questions]);
  (0, _react.useEffect)(function () {
    var list = document.getElementById('chat-list-body');

    if (list) {
      list.scrollTop = list.scrollHeight;
    }
  }, [chatList.length]);
  (0, _react.useEffect)(function () {
    if (open) {
      var interval = setInterval(function () {
        setIdleTime(function (val) {
          return val + 1;
        });
      }, 1000);
      return function () {
        clearInterval(interval);
        setIdleTime(0);
      };
    }
  }, [open]);
  (0, _react.useEffect)(function () {
    if (idleTime >= 300) {
      setOpen(false);
    }
  }, [idleTime, currentQuestion]);

  var _useState17 = (0, _react.useState)(null),
      _useState18 = _slicedToArray(_useState17, 2),
      setRef = _useState18[1];

  var _useState19 = (0, _react.useState)({
    src: ''
  }),
      _useState20 = _slicedToArray(_useState19, 2),
      file = _useState20[0],
      setFile = _useState20[1];

  var onSelectFile = function onSelectFile() {
    var time = (0, _dayjs.default)().format();
    setChatList(function (val) {
      return [].concat(_toConsumableArray(val), [{
        message: value,
        fileSrc: file.src,
        sender: 'user',
        time: time,
        file: file.file
      }]);
    });
    updateQuestionsWithAnswers(file);
    setFile(function (val) {
      return _objectSpread(_objectSpread({}, val), {}, {
        src: ''
      });
    });
  };

  var onChangeFile = function onChangeFile(e) {
    var file = e.target.files && e.target.files[0];
    var reader = new FileReader();
    reader.readAsDataURL(file);

    reader.onloadend = function () {
      setFile({
        file: file,
        src: reader.result
      });
    };
  };

  return /*#__PURE__*/_react.default.createElement("span", {
    className: [_AppModule.default.chatBot, className].join(' ')
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      height: open ? 600 : 0,
      width: open ? 320 : 0,
      transition: "height ".concat(open ? 800 : 0, "ms ease-out")
    },
    className: _AppModule.default.chatBody
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.header
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.botLogo
  }, "BOT"), /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.display
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      fontWeight: 'bold'
    }
  }, "Chat Assistant"), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      marginTop: 4
    }
  }, typing ? 'typing...' : 'online')), /*#__PURE__*/_react.default.createElement("button", {
    onClick: function onClick() {
      return setOpen(false);
    },
    "aria-label": "close",
    className: _AppModule.default.close
  }, "\xD7")), /*#__PURE__*/_react.default.createElement("div", {
    id: "chat-list-body",
    className: _AppModule.default.body
  }, chatList.map(function (message, index) {
    return /*#__PURE__*/_react.default.createElement(_Message.default, _extends({
      key: index
    }, message));
  }), (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options) && /*#__PURE__*/_react.default.createElement(_Options.default, {
    onFinish: onFinish,
    options: currentQuestion.options,
    onSelect: onSelect,
    selected: selected
  })), idleTime > 240 && /*#__PURE__*/_react.default.createElement("div", {
    onClick: function onClick() {
      return setIdleTime(0);
    },
    className: _AppModule.default.keepAlive,
    role: "button",
    "aria-label": "keep open"
  }, "Chat assistant will close in ".concat(300 - idleTime, " seconds. Click here to keep alive")), file.src && /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.preview
  }, ['image/png', 'image/jpg'].includes(file.file.type) && /*#__PURE__*/_react.default.createElement("img", {
    alt: "",
    src: file.src
  }), ['video/mp4'].includes(file.file.type) && /*#__PURE__*/_react.default.createElement("video", {
    src: file.src
  }), !['video/mp4', 'image/png', 'image/jpg'].includes((file === null || file === void 0 ? void 0 : (_file$file = file.file) === null || _file$file === void 0 ? void 0 : _file$file.type) || '') && /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.attachment
  }, /*#__PURE__*/_react.default.createElement("img", {
    alt: "",
    src: _description.default
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.fileName
  }, file === null || file === void 0 ? void 0 : (_file$file2 = file.file) === null || _file$file2 === void 0 ? void 0 : _file$file2.name))), currentQuestion && /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.footer
  }, ['input', 'csv', 'number'].includes(currentQuestion.answerType) && /*#__PURE__*/_react.default.createElement("input", {
    placeholder: "Jot something down",
    onKeyPress: onEnter,
    onChange: onChange,
    value: value,
    type: currentQuestion.answerType === 'number' ? 'number' : 'text',
    className: _AppModule.default.input
  }), ['paragraph'].includes(currentQuestion.answerType) && /*#__PURE__*/_react.default.createElement(_reactTextareaAutosize.default, {
    onKeyPress: onEnter,
    placeholder: "Jot something down",
    onChange: onChange,
    value: value,
    maxRows: 6,
    className: _AppModule.default.input
  }), currentQuestion.answerType === 'file' && /*#__PURE__*/_react.default.createElement("div", {
    className: _AppModule.default.uploader,
    role: "button",
    onClick: function onClick() {
      var element = document.getElementById('file-id');
      element && element.click();
    },
    style: {
      flex: 1
    },
    id: "file-upload-id"
  }, "Upload a file", /*#__PURE__*/_react.default.createElement("input", {
    accept: '.pdf,.doc,.png,.jpg,.docx,.mp4,.mov',
    ref: setRef,
    onChange: onChangeFile,
    style: {
      display: 'none'
    },
    id: "file-id",
    type: "file"
  })), currentQuestion.answerType !== 'select' && /*#__PURE__*/_react.default.createElement("img", {
    role: "button",
    onClick: currentQuestion.answerType === 'file' ? onSelectFile : onSend,
    className: _AppModule.default.icon,
    alt: "",
    src: _send.default
  }))), !open && /*#__PURE__*/_react.default.createElement("div", {
    tabIndex: 0,
    "data-testid": "open",
    role: "button",
    onClick: function onClick() {
      return setOpen(true);
    },
    "aria-label": "send message",
    className: _AppModule.default.button
  }, /*#__PURE__*/_react.default.createElement("img", {
    alt: "",
    src: _icon.default
  })));
};

ChatBot.propTypes = {
  className: _propTypes.default.string,
  lastMessage: _propTypes.default.func.isRequired,
  questions: _propTypes.default.arrayOf(_propTypes.default.shape({
    question: _propTypes.default.func.isRequired,
    answerType: _propTypes.default.any,
    identifier: _propTypes.default.string.isRequired,
    answer: _propTypes.default.any,
    answered: _propTypes.default.bool,
    options: _propTypes.default.arrayOf(_propTypes.default.string),
    fileSrc: _propTypes.default.string,
    validator: _propTypes.default.shape({
      message: _propTypes.default.func.isRequired,
      validatorCallback: _propTypes.default.func.isRequired
    })
  })).isRequired,
  onAnswer: _propTypes.default.func.isRequired,
  initialMessages: _propTypes.default.array
};
var _default = ChatBot;
exports.default = _default;
//# sourceMappingURL=ChatBot.js.map