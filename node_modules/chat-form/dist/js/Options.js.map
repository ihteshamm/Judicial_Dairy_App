{"version":3,"sources":["../../src/Options.tsx"],"names":["Options","props","options","onSelect","selected","onFinish","search","setSearch","onSearch","e","persist","target","value","styles","backgroundColor","width","marginBottom","height","input","maxHeight","overflowY","filter","option","toLowerCase","includes","map","join","display","justifyContent","finish"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;AAQA,IAAMA,OAAkB,GAAG,SAArBA,OAAqB,CAACC,KAAD,EAAW;AAAA,MAC5BC,OAD4B,GACcD,KADd,CAC5BC,OAD4B;AAAA,MACnBC,QADmB,GACcF,KADd,CACnBE,QADmB;AAAA,MACTC,QADS,GACcH,KADd,CACTG,QADS;AAAA,MACCC,QADD,GACcJ,KADd,CACCI,QADD;;AAAA,kBAER,qBAAS,EAAT,CAFQ;AAAA;AAAA,MAE7BC,MAF6B;AAAA,MAErBC,SAFqB;;AAGpC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAA4C;AAC3DA,IAAAA,CAAC,CAACC,OAAF;AACAH,IAAAA,SAAS,CAACE,CAAC,CAACE,MAAF,CAASC,KAAV,CAAT;AACD,GAHD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEC,mBAAOX;AAAvB,kBACE;AACE,IAAA,KAAK,EAAE;AAAEY,MAAAA,eAAe,EAAE,MAAnB;AAA2BC,MAAAA,KAAK,EAAE,MAAlC;AAA0CC,MAAAA,YAAY,EAAE,EAAxD;AAA4DC,MAAAA,MAAM,EAAE;AAApE,KADT;AAEE,IAAA,SAAS,EAAEJ,mBAAOK,KAFpB;AAGE,IAAA,QAAQ,EAAEV,QAHZ;AAIE,IAAA,WAAW,EAAC;AAJd,IADF,eAOE;AAAK,IAAA,KAAK,EAAE;AAAEW,MAAAA,SAAS,EAAE,GAAb;AAAkBC,MAAAA,SAAS,EAAE;AAA7B;AAAZ,KACGlB,OAAO,CACLmB,MADF,CACS,UAACC,MAAD;AAAA,WAAoBA,MAAM,CAACC,WAAP,GAAqBC,QAArB,CAA8BlB,MAAM,CAACiB,WAAP,EAA9B,CAApB;AAAA,GADT,EAEEE,GAFF,CAEM,UAACH,MAAD;AAAA,wBACH;AAAK,MAAA,GAAG,EAAEA;AAAV,oBACE;AACE,MAAA,OAAO,EAAE;AAAA,eAAMnB,QAAQ,CAACmB,MAAD,CAAd;AAAA,OADX;AAEE,MAAA,SAAS,EAAE,CAACT,mBAAOS,MAAR,EAAgBlB,QAAQ,CAACoB,QAAT,CAAkBF,MAAlB,IAA4BT,mBAAOT,QAAnC,GAA8C,EAA9D,EAAkEsB,IAAlE,CAAuE,GAAvE;AAFb,OAIGJ,MAJH,CADF,CADG;AAAA,GAFN,CADH,CAPF,eAqBE;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,cAAc,EAAE;AAAnC;AAAZ,kBACE;AAAQ,IAAA,OAAO,EAAEvB,QAAjB;AAA2B,IAAA,SAAS,EAAEQ,mBAAOgB;AAA7C,cADF,CArBF,CADF;AA6BD,CApCD;;;AALE3B,EAAAA,O;AACAC,EAAAA,Q;AACAE,EAAAA,Q;AACAD,EAAAA,Q;;eAwCaJ,O","sourcesContent":["import React, { ChangeEvent, FC, useState } from 'react';\nimport styles from './App.module.scss';\n\ninterface Props {\n  options: string[];\n  onSelect: (option: string) => void;\n  onFinish: () => void;\n  selected: string[];\n}\nconst Options: FC<Props> = (props) => {\n  const { options, onSelect, selected, onFinish } = props;\n  const [search, setSearch] = useState('');\n  const onSearch = (e: ChangeEvent<HTMLInputElement>): void => {\n    e.persist();\n    setSearch(e.target.value);\n  };\n  return (\n    <div className={styles.options}>\n      <input\n        style={{ backgroundColor: '#fff', width: '100%', marginBottom: 16, height: 24 }}\n        className={styles.input}\n        onChange={onSearch}\n        placeholder=\"Search\"\n      />\n      <div style={{ maxHeight: 160, overflowY: 'scroll' }}>\n        {options\n          .filter((option: string) => option.toLowerCase().includes(search.toLowerCase()))\n          .map((option: string) => (\n            <div key={option}>\n              <button\n                onClick={() => onSelect(option)}\n                className={[styles.option, selected.includes(option) ? styles.selected : ''].join(' ')}\n              >\n                {option}\n              </button>\n            </div>\n          ))}\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <button onClick={onFinish} className={styles.finish}>\n          Finish\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Options;\n"],"file":"Options.js"}