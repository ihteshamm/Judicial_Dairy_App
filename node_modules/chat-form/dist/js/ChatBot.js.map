{"version":3,"sources":["../../src/ChatBot.tsx"],"names":["ChatBot","props","className","questions","lastMessage","onAnswer","initialMessages","idleTime","setIdleTime","keyValue","setKeyValue","currentQuestion","setCurrentQuestion","updateQuestionsWithAnswers","answer","val","identifier","value","map","each","answered","open","setOpen","setValue","chatList","setChatList","typing","setTyping","onChange","e","persist","target","selected","setSelected","onSelect","select","index","findIndex","filter","i","onSend","time","format","message","sender","answerType","split","validator","validatorCallBack","validatorCallback","setTimeout","onFinish","length","join","undefined","onEnter","charCode","shiftKey","unansweredQuestion","find","question","list","document","getElementById","scrollTop","scrollHeight","interval","setInterval","clearInterval","setRef","src","file","setFile","onSelectFile","fileSrc","onChangeFile","files","reader","FileReader","readAsDataURL","onloadend","result","styles","chatBot","height","width","transition","chatBody","header","botLogo","display","fontWeight","marginTop","close","body","options","keepAlive","preview","includes","type","attachment","description","fileName","name","footer","input","uploader","element","click","flex","icon","send","button"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, FC, KeyboardEvent, useEffect, useState } from 'react';\nimport styles from './App.module.scss';\nimport icon from './assets/icon.svg';\nimport send from './assets/send.svg';\nimport description from './assets/description.svg';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport MessageView, { Message } from './Message';\nimport Options from './Options';\nimport moment from 'dayjs';\n\nexport interface Props {\n  className?: string;\n  lastMessage: (value: any) => string;\n  questions: Question[];\n  onAnswer: (questions: Question[], value?: any) => void;\n  initialMessages?: Message[];\n}\n\nexport interface ValidatorObject {\n  message: (value: any) => string;\n  validatorCallback: (value: any) => boolean;\n}\n\nexport interface Question {\n  question: (value: any) => string;\n  answerType: 'paragraph' | 'input' | 'boolean' | 'select' | 'file' | 'number' | 'csv' | any;\n  identifier: string;\n  answer?: string | boolean | number | any;\n  answered?: boolean;\n  options?: string[];\n  fileSrc?: string;\n  validator?: ValidatorObject;\n}\n\nconst ChatBot: FC<Props> = (props) => {\n  const { className, questions, lastMessage, onAnswer, initialMessages = [] } = props;\n\n  const [idleTime, setIdleTime] = useState<number>(0);\n\n  const [keyValue, setKeyValue] = useState<any>({});\n\n  const [currentQuestion, setCurrentQuestion] = useState<Question>();\n\n  const updateQuestionsWithAnswers = (answer: any): void => {\n    const val = currentQuestion && { ...keyValue, [currentQuestion.identifier]: answer };\n    if (val) {\n      setKeyValue(val);\n    }\n\n    const value = questions.map((each) =>\n      each.identifier === currentQuestion?.identifier\n        ? {\n            ...each,\n            answered: true,\n            answer,\n          }\n        : each,\n    );\n    onAnswer(value, val);\n  };\n  const [open, setOpen] = useState<boolean>(true);\n  const [value, setValue] = useState<string>('');\n\n  const [chatList, setChatList] = useState<Message[]>(initialMessages);\n\n  const [typing, setTyping] = useState<boolean>(false);\n  const onChange = (e: any) => {\n    e.persist();\n    setValue(e.target.value);\n  };\n\n  const [selected, setSelected] = useState<string[]>([]);\n\n  const onSelect = (select: string) => {\n    const index = selected.findIndex((val: string) => val === select);\n    if (index !== -1) {\n      return setSelected((val) => val.filter((e, i) => i !== index));\n    }\n    setSelected((val) => [...val, select]);\n  };\n\n  const onSend = (): void => {\n    setIdleTime(0);\n    if (value) {\n      const time = moment().format();\n      setChatList((val) => [...val, { message: value, sender: 'user', time }]);\n      const answer = currentQuestion?.answerType === 'csv' ? value.split(',') : value;\n      if (currentQuestion?.validator) {\n        const validatorCallBack = currentQuestion?.validator?.validatorCallback;\n        if (validatorCallBack && !validatorCallBack(answer)) {\n          setTyping(true);\n          setTimeout(() => {\n            setChatList((val) => [\n              ...val,\n              { message: currentQuestion?.validator?.message(value) || '', sender: 'bot', time },\n            ]);\n            setTyping(false);\n          }, 1000);\n          return;\n        }\n      }\n      updateQuestionsWithAnswers(answer);\n      setValue('');\n      return;\n    }\n  };\n\n  const onFinish = () => {\n    setIdleTime(0);\n    const time = moment().format();\n    const message = !selected.length ? `My ${currentQuestion?.identifier} not listed` : ` - ${selected.join(`\\n - `)}`;\n\n    setChatList((val) => [...val, { message, sender: 'user', time }]);\n    if (currentQuestion?.validator) {\n      const validatorCallBack = currentQuestion?.validator?.validatorCallback;\n      if (validatorCallBack && !validatorCallBack(selected)) {\n        return setChatList((val) => [\n          ...val,\n          { message: currentQuestion?.validator?.message(selected) || '', sender: 'bot', time },\n        ]);\n      }\n    }\n    setCurrentQuestion(undefined);\n    updateQuestionsWithAnswers(selected);\n    setSelected([]);\n  };\n\n  const onEnter = (e: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (e.charCode === 13 && value && !e.shiftKey) {\n      onSend();\n    }\n  };\n\n  useEffect(() => {\n    setTyping(true);\n    setTimeout(() => {\n      const time = moment().format();\n      const sender = 'bot';\n      const unansweredQuestion = questions.find((question) => !question.answered);\n      setCurrentQuestion(unansweredQuestion);\n      if (unansweredQuestion) {\n        const message = unansweredQuestion.question(keyValue);\n        setChatList((val) => [...val, { message, sender, time }]);\n      } else {\n        const message = lastMessage(keyValue);\n        setChatList((val) => [...val, { message, sender, time }]);\n      }\n      setTyping(false);\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [questions]);\n\n  useEffect(() => {\n    const list = document.getElementById('chat-list-body') as HTMLDivElement;\n    if (list) {\n      list.scrollTop = list.scrollHeight;\n    }\n  }, [chatList.length]);\n\n  useEffect(() => {\n    if (open) {\n      const interval = setInterval(() => {\n        setIdleTime((val) => val + 1);\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n        setIdleTime(0);\n      };\n    }\n  }, [open]);\n\n  useEffect(() => {\n    if (idleTime >= 300) {\n      setOpen(false);\n    }\n  }, [idleTime, currentQuestion]);\n\n  const [, setRef] = useState<HTMLInputElement | null>(null);\n  const [file, setFile] = useState<{ src: any; file?: any }>({ src: '' });\n  const onSelectFile = () => {\n    const time = moment().format();\n    setChatList((val) => [...val, { message: value, fileSrc: file.src, sender: 'user', time, file: file.file }]);\n    updateQuestionsWithAnswers(file);\n    setFile((val) => ({ ...val, src: '' }));\n  };\n\n  const onChangeFile = (e: ChangeEvent<HTMLInputElement>) => {\n    const file: any = e.target.files && (e.target.files[0] as Blob);\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = () => {\n      setFile({ file, src: reader.result });\n    };\n  };\n\n  return (\n    <span className={[styles.chatBot, className].join(' ')}>\n      <div\n        style={{ height: open ? 600 : 0, width: open ? 320 : 0, transition: `height ${open ? 800 : 0}ms ease-out` }}\n        className={styles.chatBody}\n      >\n        <div className={styles.header}>\n          <div className={styles.botLogo}>BOT</div>\n          <div className={styles.display}>\n            <div style={{ fontWeight: 'bold' }}>Chat Assistant</div>\n            <div style={{ marginTop: 4 }}>{typing ? 'typing...' : 'online'}</div>\n          </div>\n          <button onClick={() => setOpen(false)} aria-label=\"close\" className={styles.close}>\n            &times;\n          </button>\n        </div>\n        <div id=\"chat-list-body\" className={styles.body}>\n          {chatList.map((message: Message, index: number) => (\n            <MessageView key={index} {...message} />\n          ))}\n          {currentQuestion?.options && (\n            <Options onFinish={onFinish} options={currentQuestion.options} onSelect={onSelect} selected={selected} />\n          )}\n        </div>\n        {idleTime > 240 && (\n          <div\n            onClick={() => setIdleTime(0)}\n            className={styles.keepAlive}\n            role=\"button\"\n            aria-label=\"keep open\"\n          >{`Chat assistant will close in ${300 - idleTime} seconds. Click here to keep alive`}</div>\n        )}\n        {file.src && (\n          <div className={styles.preview}>\n            {['image/png', 'image/jpg'].includes(file.file.type) && <img alt=\"\" src={file.src} />}\n            {['video/mp4'].includes(file.file.type) && <video src={file.src} />}\n            {!['video/mp4', 'image/png', 'image/jpg'].includes(file?.file?.type || '') && (\n              <div className={styles.attachment}>\n                <img alt=\"\" src={description} />\n                <div className={styles.fileName}>{file?.file?.name}</div>\n              </div>\n            )}\n          </div>\n        )}\n        {currentQuestion && (\n          <div className={styles.footer}>\n            {['input', 'csv', 'number'].includes(currentQuestion.answerType) && (\n              <input\n                placeholder=\"Jot something down\"\n                onKeyPress={onEnter}\n                onChange={onChange}\n                value={value}\n                type={currentQuestion.answerType === 'number' ? 'number' : 'text'}\n                className={styles.input}\n              />\n            )}\n            {['paragraph'].includes(currentQuestion.answerType) && (\n              <TextareaAutosize\n                onKeyPress={onEnter}\n                placeholder=\"Jot something down\"\n                onChange={onChange}\n                value={value}\n                maxRows={6}\n                className={styles.input}\n              />\n            )}\n            {currentQuestion.answerType === 'file' && (\n              <div\n                className={styles.uploader}\n                role=\"button\"\n                onClick={() => {\n                  const element = document.getElementById('file-id') as HTMLInputElement;\n                  element && element.click();\n                }}\n                style={{ flex: 1 }}\n                id=\"file-upload-id\"\n              >\n                Upload a file\n                <input\n                  accept={'.pdf,.doc,.png,.jpg,.docx,.mp4,.mov'}\n                  ref={setRef}\n                  onChange={onChangeFile}\n                  style={{ display: 'none' }}\n                  id=\"file-id\"\n                  type=\"file\"\n                />\n              </div>\n            )}\n            {currentQuestion.answerType !== 'select' && (\n              <img\n                role=\"button\"\n                onClick={currentQuestion.answerType === 'file' ? onSelectFile : onSend}\n                className={styles.icon}\n                alt=\"\"\n                src={send}\n              />\n            )}\n          </div>\n        )}\n      </div>\n      {!open && (\n        <div\n          tabIndex={0}\n          data-testid=\"open\"\n          role=\"button\"\n          onClick={() => setOpen(true)}\n          aria-label=\"send message\"\n          className={styles.button}\n        >\n          <img alt=\"\" src={icon} />\n        </div>\n      )}\n    </span>\n  );\n};\n\nexport default ChatBot;\n"],"file":"ChatBot.js"}