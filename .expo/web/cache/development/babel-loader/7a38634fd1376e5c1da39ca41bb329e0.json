{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\nexport default function ResourceSavingScene(_ref) {\n  var isVisible = _ref.isVisible,\n      children = _ref.children,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, [\"isVisible\", \"children\", \"style\"]);\n\n  if (screensEnabled !== null && screensEnabled !== void 0 && screensEnabled() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return React.createElement(Screen, _extends({\n        activityState: isVisible ? 2 : 0,\n        style: style\n      }, rest), children);\n    } else {\n      return React.createElement(Screen, _extends({\n        active: isVisible ? 1 : 0,\n        style: style\n      }, rest), children);\n    }\n  }\n\n  if (Platform.OS === 'web') {\n    return React.createElement(View, _extends({\n      hidden: !isVisible,\n      style: [{\n        display: isVisible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest), children);\n  }\n\n  return React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: isVisible ? 'auto' : 'none'\n  }, React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n    pointerEvents: isVisible ? 'auto' : 'none',\n    style: isVisible ? styles.attached : styles.detached\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["style","children","display","styles","isVisible","Platform","container","flex","overflow","attached","detached","top","FAR_FAR_AWAY"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,MAAA,EAAA,cAAA,QAGE,sBAHF;AAgBA,IAAA,YAAe,GAAA,KAAf;AAA4C,eAAA,SAAA,mBAAA,OAO1C;AAAA,MAP0C,SAO1C,QAP0C,SAO1C;AAAA,MAHA,QAGA,QAHA,QAGA;AAAA,MAPa,KAOb,QAPa,KAOb;AAAA,MADA,IACA;;AAEI,MAAA,cAAA,KAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,IAAA,cAAA,EAAA,IAAA,QAAA,CAAA,EAAA,KAAA,KAAA,EAAA;AAAA,QAAA,sBAAA,EAAA;AACE,aAC0C,KAAA,CAAA,aAAA,CAAOA,MAAP,EAAOA,QAAAA,CAAAA;AAAjD,QAAA,aACGC,EADH,SAAA,GAAA,CAAA,GAAA,CAAiDD;AAFnD,QAAA,KAAA,EAAA;AAEmDA,OAAAA,EAI9C,IAJ8CA,CAAP,EAIvC,QAJuC,CAD1C;AAMF,KAPA,MAOA;AACE,aACmC,KAAA,CAAA,aAAA,CAAOA,MAAP,EAAOA,QAAAA,CAAAA;AAA1C,QAAA,MAAA,EAAA,SAAA,GAAA,CAAA,GAAA,CAA0CA;AAF5C,QAAA,KAAA,EAAA;AAE4CA,OAAAA,EAI7C,IAJ6CA,CAAP,EAItC,QAJsC,CADnC;;AAQN;;AAEI,MAAA,QAAA,CAAA,EAAA,KAAA,KAAA,EAAA;AAEE,WAFF,KAAA,CAAA,aAAA,CAAA,IAAA,EAGE,QACE,CAAA;AAAEE,MAAAA,MAAAA,EAAAA,CAAO,SAAT;AADK,MAAA,KAELC,EAAAA,CALJ;AAQE,QAAA,OAAA,EAAA,SAAeC,GAAAA,MAAAA,GAAS;AAR1B,OAKID,EALJ,MAWGF,CAZL,SAMME,EANN,KAMMA,CADA;AAUP,MAAA,aAAA,EAAA,SAAA,GAAA,MAAA,GAAA;AAVO,KAAA,E,IAAA,CAJJ,E,QAAA,CAEE;AAcN;;AACE,SAAA,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAGE,IAAA,KAAA,EAAA,CAAA,MAAa,CAAEC,SAAf,EAAwB,KAAxB,CAHF;AAMI,IAAA,aAAa,EADf,SAAA,GAAA,MAAA,GAAA;AALF,GAAA,EAOI,KAAA,CAAA,aAAA,CACE,IADF,EACE;AACA,IAAA,WAAA,EAAA,KADA;AAEAC,IAAAA,qBALJ,EAQE,QAAOD,CAAAA,EAAP,KAAgB,KAAhB,GAAmBD,CAAH,SAAhB,GAAqCA,IALnC;AATR,IAAA,aAAA,EAAA,SAAA,GAAA,MAAA,GAAA,MASQ;AAWT,IAAA,KAAA,EAAA,SAAA,GAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA;AAXS,GADF,EAcR,QAdQ,CAPJ,CAAA;AAsBFG;AACEC,IADS,MAAA,GAAA,UAAA,CAAA,MAAA,CAAA;AAETC,EAAAA,SAAAA,EAAQ;AAHqB,IAAA,IAAA,EAAA,CAGrB;AAEVC,IAAAA,QAAU,EAAA;AAFA,GAFC;AADoB,EAAA,QAAA,EAAA;AAQ/BC,IAAAA,IAAAA,EAAQ;AARuB,GACpB;AASTC,EAAAA,QAAKC,EAAAA;AAFG,IAAA,IAAA,EAAA,CAEHA;AAVT,IAAA,GAAA,EAAA;AAUSA;AATI,CAAA,CACTL","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  isVisible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  // react-native-screens is buggy on web\n  if (screensEnabled?.() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen activityState={isVisible ? 2 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen active={isVisible ? 1 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    }\n  }\n\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!isVisible}\n        style={[\n          { display: isVisible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={isVisible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        style={isVisible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}